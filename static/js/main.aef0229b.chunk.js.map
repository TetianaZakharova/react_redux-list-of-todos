{"version":3,"sources":["store/index.ts","helpers/api.ts","components/TodoList.tsx","App.tsx","index.tsx"],"names":["sortTodo","todos","type","isLoading","state","loading","getTodos","loadSortButtons","initialState","store","createStore","action","composeWithDevTools","BASE_URL","TODOS_URL","USERS_URL","getPreparedTodos","a","Promise","all","fetch","then","json","users","map","todo","user","find","id","userId","TodoList","dispatch","useDispatch","className","key","name","title","classnames","item__completed","completed","onClick","removeTodo","filter","App","useSelector","isLoadSortButtons","sort","b","localeCompare","finishLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aef0229b.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst REMOVE_TODO = 'REMOVE_TODO';\nconst SORT_TODO = 'SORT_TODO';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({\n  type: START_LOADING,\n});\nexport const finishLoading = (todos: TodosFromServer[]) => ({\n  type: FINISH_LOADING,\n  todos,\n});\nexport const removeTodo = (todos: TodosFromServer[]) => ({\n  type: REMOVE_TODO,\n  todos,\n});\nexport const sortTodo = (todos: TodosFromServer[]) => ({\n  type: SORT_TODO,\n  todos,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getTodos = (state: RootState) => state.todos;\nexport const loadSortButtons = (state: RootState) => state.loadSortButtons;\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  todos: TodosFromServer[];\n  loadSortButtons: boolean;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  todos: [],\n  loadSortButtons: false,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        loadSortButtons: true,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        todos: [...action.todos]\n      };\n\n    case REMOVE_TODO:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n\n    case SORT_TODO:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\nconst TODOS_URL = `${BASE_URL}/todos.json`;\nconst USERS_URL = `${BASE_URL}/users.json`;\n\nconst getTodos = () => {\n  return fetch(TODOS_URL)\n    .then(todos => todos.json());\n};\n\nconst getUsers = () => {\n  return fetch(USERS_URL)\n    .then(users => users.json());\n};\n\nexport const getPreparedTodos = async () => {\n  const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n\n  return todos.map((todo: TodoFromServer) => {\n    return {\n      ...todo,\n      user: users.find((user: UserFromServer) => user.id === todo.userId),\n    };\n  });\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { removeTodo } from '../store';\n\ntype Props = {\n  todos: Array<TodosFromServer>;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n  const remove = (id: number) => {\n    dispatch(removeTodo(todos.filter(todo => todo.id !== id)));\n  };\n\n  return (\n    <>\n      <ul className=\"todo__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className=\"todo__item\"\n          >\n            <h3 className=\"todo__item--user\">{todo.user.name}</h3>\n            <p className=\"todo__item--text\">{todo.title}</p>\n            <p\n              className={classnames('item__status', {\n                item__completed: todo.completed,\n              })}\n            >\n              {todo.completed ? 'Done' : 'In Process'}\n            </p>\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={() => remove(todo.id)}\n            >\n              X\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPreparedTodos } from './helpers/api';\nimport { TodoList } from './components/TodoList';\nimport './App.scss';\n\nimport {\n  isLoading,\n  getTodos,\n  startLoading,\n  finishLoading,\n  sortTodo,\n  loadSortButtons,\n} from './store';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const todos = useSelector(getTodos);\n  const isLoadSortButtons = useSelector(loadSortButtons);\n  const dispatch = useDispatch();\n\n  const downloadTodos = () => {\n    dispatch(startLoading());\n    getPreparedTodos()\n      .then(todo => dispatch(finishLoading(todo)));\n  };\n\n  const sortByTitle = () => {\n    dispatch(sortTodo([...todos].sort((a, b) => a.title.localeCompare(b.title))));\n  };\n\n  const sortByUserName = () => {\n    dispatch(sortTodo([...todos].sort((a, b) => a.user.name.localeCompare(b.user.name))));\n  };\n\n  const sortByStatus = () => {\n    dispatch(sortTodo([...todos].sort((a, b) => +a.completed - +b.completed)));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {isLoadSortButtons\n        ? (\n          <div className=\"todo__button\">\n            <button type=\"button\" className=\"btn btn-info\" onClick={sortByTitle}>Sort By Title</button>\n            <button type=\"button\" className=\"btn btn-info\" onClick={sortByUserName}>Sort By Name</button>\n            <button type=\"button\" className=\"btn btn-info\" onClick={sortByStatus}>Sort By Status</button>\n          </div>\n        )\n        : (\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={downloadTodos}\n          >\n            Load ToDos\n          </button>\n        )}\n      {loading\n        ? 'Loading...'\n        : <TodoList todos={todos} />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}